;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 4.1.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(setq odelib (load-foreign (format nil "~A/tmp/ode/build/libode.so" (unix:getenv "HOME"))))

(defmacro defcenum (type &rest enums)
  (let ((index 0)
	(ret))
    (setq ret
	  (mapcar
	   #'(lambda (x)
	       (if (keywordp x) (setq x (intern (symbol-name x))))
	       (cond
		((listp x)
		 (setq index (second x))
		 (prog1 
		     (if (keywordp (car x)) 
			 (list 'defconstant (intern (symbol-name (car x))) index)
		       (list 'defconstant (car x) index))
		   (if (numberp index) (incf index) (setq index (list '1+ index)))
		   )
		 )
		(t (prog1 (list 'defconstant x index)
		     (if (numberp index) (incf index) (setq index (list '1+ index))))))
	       )
	   enums))
    `(progn (setq ,type :integer)
	    ,@ret)))

(defmacro defanonenum (&rest enums)
   "Converts anonymous enums to defconstants."
 (let ((index 0)
       (ret))
    (setq ret
      (mapcar
      #'(lambda (x)
	 (cond
	  ((listp x)
	   (prog1
	       (list 'defconstant (car x) index)
	     (if (numberp index) (incf index) (setq index (list '1+ index)))))
	  (t (prog1 (list 'defconstant x index)
	       (if (numberp index) (incf index) (setq index (list '1+ index)))))))
      enums))
    `(progn ,@ret)))


;;;SWIG wrapper code starts here
;;;SWIG wrapper code ends here


;;(defconstant dInfinity (/ 1.0d0 0.0d0))
;;(defconstant dNaN (/ (1.0 (- 0.0)d0 (1.0) 0.0)d0))

(defconstant dInfinity (/ 1.0 0.0))
(defconstant dNaN *nan*)

(defcenum dSpaceAxis
	:dSA__MIN
	(:dSA_X dSA__MIN)
	:dSA_Y
	:dSA_Z
	:dSA__MAX)

(defcenum dMotionDynamics
	:dMD__MIN
	(:dMD_LINEAR dMD__MIN)
	:dMD_ANGULAR
	:dMD__MAX)

(defcenum dDynamicsAxis
	:dDA__MIN
	(:dDA__L_MIN (* (+ dDA__MIN dMD_LINEAR) dSA__MAX))
	(:dDA_LX (+ dDA__L_MIN dSA_X))
	(:dDA_LY (+ dDA__L_MIN dSA_Y))
	(:dDA_LZ (+ dDA__L_MIN dSA_Z))
	(:dDA__L_MAX (+ dDA__L_MIN dSA__MAX))
	(:dDA__A_MIN (* (+ dDA__MIN dMD_ANGULAR) dSA__MAX))
	(:dDA_AX (+ dDA__A_MIN dSA_X))
	(:dDA_AY (+ dDA__A_MIN dSA_Y))
	(:dDA_AZ (+ dDA__A_MIN dSA_Z))
	(:dDA__A_MAX (+ dDA__A_MIN dSA__MAX))
	(:dDA__MAX (* (+ dDA__MIN dMD__MAX) dSA__MAX)))

(defcenum dVec3Element
	:dV3E__MIN
	(:dV3E__AXES_MIN dV3E__MIN)
	(:dV3E_X (+ dV3E__AXES_MIN dSA_X))
	(:dV3E_Y (+ dV3E__AXES_MIN dSA_Y))
	(:dV3E_Z (+ dV3E__AXES_MIN dSA_Z))
	(:dV3E__AXES_MAX (+ dV3E__AXES_MIN dSA__MAX))
	(:dV3E_PAD dV3E__AXES_MAX)
	:dV3E__MAX
	(:dV3E__AXES_COUNT (- dV3E__AXES_MAX dV3E__AXES_MIN)))

(defcenum dVec4Element
	:dV4E__MIN
	(:dV4E_X (+ dV4E__MIN dSA_X))
	(:dV4E_Y (+ dV4E__MIN dSA_Y))
	(:dV4E_Z (+ dV4E__MIN dSA_Z))
	(:dV4E_O (+ dV4E__MIN dSA__MAX))
	:dV4E__MAX)

(defcenum dMat3Element
	:dM3E__MIN
	(:dM3E__X_MIN (* (+ dM3E__MIN dSA_X) dV3E__MAX))
	(:dM3E__X_AXES_MIN (+ dM3E__X_MIN dV3E__AXES_MIN))
	(:dM3E_XX (+ dM3E__X_MIN dV3E_X))
	(:dM3E_XY (+ dM3E__X_MIN dV3E_Y))
	(:dM3E_XZ (+ dM3E__X_MIN dV3E_Z))
	(:dM3E__X_AXES_MAX (+ dM3E__X_MIN dV3E__AXES_MAX))
	(:dM3E_XPAD (+ dM3E__X_MIN dV3E_PAD))
	(:dM3E__X_MAX (+ dM3E__X_MIN dV3E__MAX))
	(:dM3E__Y_MIN (* (+ dM3E__MIN dSA_Y) dV3E__MAX))
	(:dM3E__Y_AXES_MIN (+ dM3E__Y_MIN dV3E__AXES_MIN))
	(:dM3E_YX (+ dM3E__Y_MIN dV3E_X))
	(:dM3E_YY (+ dM3E__Y_MIN dV3E_Y))
	(:dM3E_YZ (+ dM3E__Y_MIN dV3E_Z))
	(:dM3E__Y_AXES_MAX (+ dM3E__Y_MIN dV3E__AXES_MAX))
	(:dM3E_YPAD (+ dM3E__Y_MIN dV3E_PAD))
	(:dM3E__Y_MAX (+ dM3E__Y_MIN dV3E__MAX))
	(:dM3E__Z_MIN (* (+ dM3E__MIN dSA_Z) dV3E__MAX))
	(:dM3E__Z_AXES_MIN (+ dM3E__Z_MIN dV3E__AXES_MIN))
	(:dM3E_ZX (+ dM3E__Z_MIN dV3E_X))
	(:dM3E_ZY (+ dM3E__Z_MIN dV3E_Y))
	(:dM3E_ZZ (+ dM3E__Z_MIN dV3E_Z))
	(:dM3E__Z_AXES_MAX (+ dM3E__Z_MIN dV3E__AXES_MAX))
	(:dM3E_ZPAD (+ dM3E__Z_MIN dV3E_PAD))
	(:dM3E__Z_MAX (+ dM3E__Z_MIN dV3E__MAX))
	(:dM3E__MAX (* (+ dM3E__MIN dSA__MAX) dV3E__MAX)))

(defcenum dMat4Element
	:dM4E__MIN
	(:dM4E__X_MIN (* (+ dM4E__MIN dV4E_X) dV4E__MAX))
	(:dM4E_XX (+ dM4E__X_MIN dV4E_X))
	(:dM4E_XY (+ dM4E__X_MIN dV4E_Y))
	(:dM4E_XZ (+ dM4E__X_MIN dV4E_Z))
	(:dM4E_XO (+ dM4E__X_MIN dV4E_O))
	(:dM4E__X_MAX (+ dM4E__X_MIN dV4E__MAX))
	(:dM4E__Y_MIN (* (+ dM4E__MIN dV4E_Y) dV4E__MAX))
	(:dM4E_YX (+ dM4E__Y_MIN dV4E_X))
	(:dM4E_YY (+ dM4E__Y_MIN dV4E_Y))
	(:dM4E_YZ (+ dM4E__Y_MIN dV4E_Z))
	(:dM4E_YO (+ dM4E__Y_MIN dV4E_O))
	(:dM4E__Y_MAX (+ dM4E__Y_MIN dV4E__MAX))
	(:dM4E__Z_MIN (* (+ dM4E__MIN dV4E_Z) dV4E__MAX))
	(:dM4E_ZX (+ dM4E__Z_MIN dV4E_X))
	(:dM4E_ZY (+ dM4E__Z_MIN dV4E_Y))
	(:dM4E_ZZ (+ dM4E__Z_MIN dV4E_Z))
	(:dM4E_ZO (+ dM4E__Z_MIN dV4E_O))
	(:dM4E__Z_MAX (+ dM4E__Z_MIN dV4E__MAX))
	(:dM4E__O_MIN (* (+ dM4E__MIN dV4E_O) dV4E__MAX))
	(:dM4E_OX (+ dM4E__O_MIN dV4E_X))
	(:dM4E_OY (+ dM4E__O_MIN dV4E_Y))
	(:dM4E_OZ (+ dM4E__O_MIN dV4E_Z))
	(:dM4E_OO (+ dM4E__O_MIN dV4E_O))
	(:dM4E__O_MAX (+ dM4E__O_MIN dV4E__MAX))
	(:dM4E__MAX (* (+ dM4E__MIN dV4E__MAX) dV4E__MAX)))

(defcenum dQuatElement
	:dQUE__MIN
	(:dQUE_R dQUE__MIN)
	:dQUE__AXIS_MIN
	(:dQUE_I (+ dQUE__AXIS_MIN dSA_X))
	(:dQUE_J (+ dQUE__AXIS_MIN dSA_Y))
	(:dQUE_K (+ dQUE__AXIS_MIN dSA_Z))
	(:dQUE__AXIS_MAX (+ dQUE__AXIS_MIN dSA__MAX))
	(:dQUE__MAX dQUE__AXIS_MAX))

(defanonenum 
	(d_ERR_UNKNOWN 0)
	d_ERR_IASSERT
	d_ERR_UASSERT
	d_ERR_LCP)

(defcenum dJointType
	(:dJointTypeNone 0)
	:dJointTypeBall
	:dJointTypeHinge
	:dJointTypeSlider
	:dJointTypeContact
	:dJointTypeUniversal
	:dJointTypeHinge2
	:dJointTypeFixed
	:dJointTypeNull
	:dJointTypeAMotor
	:dJointTypeLMotor
	:dJointTypePlane2D
	:dJointTypePR
	:dJointTypePU
	:dJointTypePiston
	:dJointTypeDBall
	:dJointTypeDHinge
	:dJointTypeTransmission)

(defanonenum 
	(dParamLoStop 0)
	dParamHiStop
	dParamVel
	dParamLoVel
	dParamHiVel
	dParamFMax
	dParamFudgeFactor
	dParamBounce
	dParamCFM
	dParamStopERP
	dParamStopCFM
	dParamSuspensionERP
	dParamSuspensionCFM
	dParamERP
	dParamsInGroup
	(dParamGroup1 #x000)
	(dParamLoStop1 #x000)
	dParamHiStop1
	dParamVel1
	dParamLoVel1
	dParamHiVel1
	dParamFMax1
	dParamFudgeFactor1
	dParamBounce1
	dParamCFM1
	dParamStopERP1
	dParamStopCFM1
	dParamSuspensionERP1
	dParamSuspensionCFM1
	dParamERP1
	(dParamGroup2 #x100)
	(dParamLoStop2 #x100)
	dParamHiStop2
	dParamVel2
	dParamLoVel2
	dParamHiVel2
	dParamFMax2
	dParamFudgeFactor2
	dParamBounce2
	dParamCFM2
	dParamStopERP2
	dParamStopCFM2
	dParamSuspensionERP2
	dParamSuspensionCFM2
	dParamERP2
	(dParamGroup3 #x200)
	(dParamLoStop3 #x200)
	dParamHiStop3
	dParamVel3
	dParamLoVel3
	dParamHiVel3
	dParamFMax3
	dParamFudgeFactor3
	dParamBounce3
	dParamCFM3
	dParamStopERP3
	dParamStopCFM3
	dParamSuspensionERP3
	dParamSuspensionCFM3
	dParamERP3
	(dParamGroup #x100))

(defanonenum 
	(dAMotorUser 0)
	(dAMotorEuler 1))

(defanonenum 
	(dTransmissionParallelAxes 0)
	(dTransmissionIntersectingAxes 1)
	(dTransmissionChainDrive 2))

(defcstruct dJointFeedback
	(f1 :integer)
	(t1 :integer)
	(f2 :integer)
	(t2 :integer))

(defforeign dGeomMoved odelib
	"dGeomMoved" () :integer)
	;;  ( :integer)

(defforeign dGeomGetBodyNext odelib
	"dGeomGetBodyNext" () :integer)
	;;  ( :integer)

(defforeign dGetConfiguration odelib
	"dGetConfiguration" () (:string))
	;;  ()

(defforeign dCheckConfiguration odelib
	"dCheckConfiguration" () :integer)
	;;  ( :char *)

(defcenum dInitODEFlags
	(:dInitFlagManualThreadCleanup #x00000001))

(defforeign dInitODE odelib
	"dInitODE" () :integer)
	;;  ()

(defforeign dInitODE2 odelib
	"dInitODE2" () :integer)
	;;  ( :integer)

(defcenum dAllocateODEDataFlags
	(:dAllocateFlagBasicData 0)
	(:dAllocateFlagCollisionData #x00000001)
	(:dAllocateMaskAll (lognot 0))) ;; ~0

(defforeign dAllocateODEDataForThread odelib
	"dAllocateODEDataForThread" () :integer)
	;;  ( :integer)

(defforeign dCleanupODEAllDataForThread odelib
	"dCleanupODEAllDataForThread" () :integer)
	;;  ()

(defforeign dCloseODE odelib
	"dCloseODE" () :integer)
	;;  ()

(defanonenum 
	(dContactMu2 #x001)
	(dContactAxisDep #x001)
	(dContactFDir1 #x002)
	(dContactBounce #x004)
	(dContactSoftERP #x008)
	(dContactSoftCFM #x010)
	(dContactMotion1 #x020)
	(dContactMotion2 #x040)
	(dContactMotionN #x080)
	(dContactSlip1 #x100)
	(dContactSlip2 #x200)
	(dContactRolling #x400)
	(dContactApprox0 #x0000)
	(dContactApprox1_1 #x1000)
	(dContactApprox1_2 #x2000)
	(dContactApprox1_N #x4000)
	(dContactApprox1 #x7000))

(defcstruct dSurfaceParameters
	(mode :integer)
	(mu :double)
	(mu2 :double)
	(rho :double)
	(rho2 :double)
	(rhoN :double)
	(bounce :double)
	(bounce_vel :double)
	(soft_erp :double)
	(soft_cfm :double)
	(motion1 :double)
	(motion2 :double)
	(motionN :double)
	(slip1 :double)
	(slip2 :double))

(defcstruct dContactGeom
	(pos :integer)
	(normal :integer)
	(depth :double)
	(g1 :integer)
	(g2 :integer)
	(side1 :integer)
	(side2 :integer))

(defcstruct dContact
	(surface dSurfaceParameters)
	(geom dContactGeom)
	(fdir1 :integer))

(defforeign dSetErrorHandler odelib
	"dSetErrorHandler" () :integer)
	;;  ( :integer)

(defforeign dSetDebugHandler odelib
	"dSetDebugHandler" () :integer)
	;;  ( :integer)

(defforeign dSetMessageHandler odelib
	"dSetMessageHandler" () :integer)
	;;  ( :integer)

(defforeign dGetErrorHandler odelib
	"dGetErrorHandler" () :integer)
	;;  ()

(defforeign dGetDebugHandler odelib
	"dGetDebugHandler" () :integer)
	;;  ()

(defforeign dGetMessageHandler odelib
	"dGetMessageHandler" () :integer)
	;;  ()

(defforeign dError odelib
	"dError" () :integer)
	;;  ( :integer :char * )

(defforeign dDebug odelib
	"dDebug" () :integer)
	;;  ( :integer :char * )

(defforeign dMessage odelib
	"dMessage" () :integer)
	;;  ( :integer :char * )

(defforeign dSetAllocHandler odelib
	"dSetAllocHandler" () :integer)
	;;  ( :integer)

(defforeign dSetReallocHandler odelib
	"dSetReallocHandler" () :integer)
	;;  ( :integer)

(defforeign dSetFreeHandler odelib
	"dSetFreeHandler" () :integer)
	;;  ( :integer)

(defforeign dGetAllocHandler odelib
	"dGetAllocHandler" () :integer)
	;;  ()

(defforeign dGetReallocHandler odelib
	"dGetReallocHandler" () :integer)
	;;  ()

(defforeign dGetFreeHandler odelib
	"dGetFreeHandler" () :integer)
	;;  ()

(defforeign dAlloc odelib
	"dAlloc" () :integer)
	;;  ( :integer)

(defforeign dRealloc odelib
	"dRealloc" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dFree odelib
	"dFree" () :integer)
	;;  ( :integer :integer)

(defforeign dSetZero odelib
	"dSetZero" () :integer)
	;;  ( :integer :integer)

(defforeign dSetValue odelib
	"dSetValue" () :integer)
	;;  ( :integer :integer :double)

(defforeign dDot odelib
	"dDot" () :float)
	;;  ( :integer :integer :integer)

(defforeign dMultiply0 odelib
	"dMultiply0" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dMultiply1 odelib
	"dMultiply1" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dMultiply2 odelib
	"dMultiply2" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dFactorCholesky odelib
	"dFactorCholesky" () :integer)
	;;  ( :integer :integer)

(defforeign dSolveCholesky odelib
	"dSolveCholesky" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dInvertPDMatrix odelib
	"dInvertPDMatrix" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dIsPositiveDefinite odelib
	"dIsPositiveDefinite" () :integer)
	;;  ( :integer :integer)

(defforeign dFactorLDLT odelib
	"dFactorLDLT" () :integer)
	;;  ( :integer :integer :integer :integer)

(defforeign dSolveL1 odelib
	"dSolveL1" () :integer)
	;;  ( :integer :integer :integer :integer)

(defforeign dSolveL1T odelib
	"dSolveL1T" () :integer)
	;;  ( :integer :integer :integer :integer)

(defforeign dScaleVector odelib
	"dScaleVector" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dVectorScale odelib
	"dVectorScale" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dSolveLDLT odelib
	"dSolveLDLT" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign dLDLTAddTL odelib
	"dLDLTAddTL" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign dLDLTRemove odelib
	"dLDLTRemove" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer :integer :integer)

(defforeign dRemoveRowCol odelib
	"dRemoveRowCol" () :integer)
	;;  ( :integer :integer :integer :integer)

(defforeign dEstimateCooperativelyFactorLDLTResourceRequirements odelib
	"dEstimateCooperativelyFactorLDLTResourceRequirements" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dCooperativelyFactorLDLT odelib
	"dCooperativelyFactorLDLT" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dEstimateCooperativelySolveLDLTResourceRequirements odelib
	"dEstimateCooperativelySolveLDLTResourceRequirements" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dCooperativelySolveLDLT odelib
	"dCooperativelySolveLDLT" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer :integer)

(defforeign dEstimateCooperativelySolveL1StraightResourceRequirements odelib
	"dEstimateCooperativelySolveL1StraightResourceRequirements" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dCooperativelySolveL1Straight odelib
	"dCooperativelySolveL1Straight" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dEstimateCooperativelySolveL1TransposedResourceRequirements odelib
	"dEstimateCooperativelySolveL1TransposedResourceRequirements" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dCooperativelySolveL1Transposed odelib
	"dCooperativelySolveL1Transposed" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dEstimateCooperativelyScaleVectorResourceRequirements odelib
	"dEstimateCooperativelyScaleVectorResourceRequirements" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dCooperativelyScaleVector odelib
	"dCooperativelyScaleVector" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defcstruct dStopwatch
	(time :double)
	(cc :integer))

(defforeign dStopwatchReset odelib
	"dStopwatchReset" () :integer)
	;;  ( :integer)

(defforeign dStopwatchStart odelib
	"dStopwatchStart" () :integer)
	;;  ( :integer)

(defforeign dStopwatchStop odelib
	"dStopwatchStop" () :integer)
	;;  ( :integer)

(defforeign dStopwatchTime odelib
	"dStopwatchTime" () :float)
	;;  ( :integer)

(defforeign dTimerStart odelib
	"dTimerStart" () :integer)
	;;  ( :char *)

(defforeign dTimerNow odelib
	"dTimerNow" () :integer)
	;;  ( :char *)

(defforeign dTimerEnd odelib
	"dTimerEnd" () :integer)
	;;  ()

(defforeign dTimerReport odelib
	"dTimerReport" () :integer)
	;;  ( :integer :integer)

(defforeign dTimerTicksPerSecond odelib
	"dTimerTicksPerSecond" () :float)
	;;  ()

(defforeign dTimerResolution odelib
	"dTimerResolution" () :float)
	;;  ()

(defforeign dRSetIdentity odelib
	"dRSetIdentity" () :integer)
	;;  ( :integer)

(defforeign dRFromAxisAndAngle odelib
	"dRFromAxisAndAngle" () :integer)
	;;  ( :integer :double :double :double :double)

(defforeign dRFromEulerAngles odelib
	"dRFromEulerAngles" () :integer)
	;;  ( :integer :double :double :double)

(defforeign dRFrom2Axes odelib
	"dRFrom2Axes" () :integer)
	;;  ( :integer :double :double :double :double :double :double)

(defforeign dRFromZAxis odelib
	"dRFromZAxis" () :integer)
	;;  ( :integer :double :double :double)

(defforeign dQSetIdentity odelib
	"dQSetIdentity" () :integer)
	;;  ( :integer)

(defforeign dQFromAxisAndAngle odelib
	"dQFromAxisAndAngle" () :integer)
	;;  ( :integer :double :double :double :double)

(defforeign dQMultiply0 odelib
	"dQMultiply0" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dQMultiply1 odelib
	"dQMultiply1" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dQMultiply2 odelib
	"dQMultiply2" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dQMultiply3 odelib
	"dQMultiply3" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dRfromQ odelib
	"dRfromQ" () :integer)
	;;  ( :integer :integer)

(defforeign dQfromR odelib
	"dQfromR" () :integer)
	;;  ( :integer :integer)

(defforeign dDQfromW odelib
	"dDQfromW" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dMassCheck odelib
	"dMassCheck" () :integer)
	;;  ( :integer)

(defforeign dMassSetZero odelib
	"dMassSetZero" () :integer)
	;;  ( :integer)

(defforeign dMassSetParameters odelib
	"dMassSetParameters" () :integer)
	;;  ( :integer :double :double :double :double :double :double :double :double :double :double)

(defforeign dMassSetSphere odelib
	"dMassSetSphere" () :integer)
	;;  ( :integer :double :double)

(defforeign dMassSetSphereTotal odelib
	"dMassSetSphereTotal" () :integer)
	;;  ( :integer :double :double)

(defforeign dMassSetCapsule odelib
	"dMassSetCapsule" () :integer)
	;;  ( :integer :double :integer :double :double)

(defforeign dMassSetCapsuleTotal odelib
	"dMassSetCapsuleTotal" () :integer)
	;;  ( :integer :double :integer :double :double)

(defforeign dMassSetCylinder odelib
	"dMassSetCylinder" () :integer)
	;;  ( :integer :double :integer :double :double)

(defforeign dMassSetCylinderTotal odelib
	"dMassSetCylinderTotal" () :integer)
	;;  ( :integer :double :integer :double :double)

(defforeign dMassSetBox odelib
	"dMassSetBox" () :integer)
	;;  ( :integer :double :double :double :double)

(defforeign dMassSetBoxTotal odelib
	"dMassSetBoxTotal" () :integer)
	;;  ( :integer :double :double :double :double)

(defforeign dMassSetTrimesh odelib
	"dMassSetTrimesh" () :integer)
	;;  ( :integer :double :integer)

(defforeign dMassSetTrimeshTotal odelib
	"dMassSetTrimeshTotal" () :integer)
	;;  ( :integer :double :integer)

(defforeign dMassAdjust odelib
	"dMassAdjust" () :integer)
	;;  ( :integer :double)

(defforeign dMassTranslate odelib
	"dMassTranslate" () :integer)
	;;  ( :integer :double :double :double)

(defforeign dMassRotate odelib
	"dMassRotate" () :integer)
	;;  ( :integer :integer)

(defforeign dMassAdd odelib
	"dMassAdd" () :integer)
	;;  ( :integer :integer)

(defforeign dMassSetCappedCylinder odelib
	"dMassSetCappedCylinder" () :integer)
	;;  ( :integer :double :integer :double :double)

(defforeign dMassSetCappedCylinderTotal odelib
	"dMassSetCappedCylinderTotal" () :integer)
	;;  ( :integer :double :integer :double :double)

(defcstruct dMass
	(mass :double)
	(c :integer)
	(I :integer))

(defforeign dTestRand odelib
	"dTestRand" () :integer)
	;;  ()

(defforeign dRand odelib
	"dRand" () :integer)
	;;  ()

(defforeign dRandGetSeed odelib
	"dRandGetSeed" () :integer)
	;;  ()

(defforeign dRandSetSeed odelib
	"dRandSetSeed" () :integer)
	;;  ( :integer)

(defforeign dRandInt odelib
	"dRandInt" () :integer)
	;;  ( :integer)

(defforeign dRandReal odelib
	"dRandReal" () :float)
	;;  ()

(defforeign dPrintMatrix odelib
	"dPrintMatrix" () :integer)
	;;  ( :integer :integer :integer :char * :integer)

(defforeign dMakeRandomVector odelib
	"dMakeRandomVector" () :integer)
	;;  ( :integer :integer :double)

(defforeign dMakeRandomMatrix odelib
	"dMakeRandomMatrix" () :integer)
	;;  ( :integer :integer :integer :double)

(defforeign dClearUpperTriangle odelib
	"dClearUpperTriangle" () :integer)
	;;  ( :integer :integer)

(defforeign dMaxDifference odelib
	"dMaxDifference" () :float)
	;;  ( :integer :integer :integer :integer)

(defforeign dMaxDifferenceLowerTriangle odelib
	"dMaxDifferenceLowerTriangle" () :float)
	;;  ( :integer :integer :integer)

(defforeign dSimpleSpaceCreate odelib
	"dSimpleSpaceCreate" () :integer)
	;;  ( :integer)

(defforeign dHashSpaceCreate odelib
	"dHashSpaceCreate" () :integer)
	;;  ( :integer)

(defforeign dQuadTreeSpaceCreate odelib
	"dQuadTreeSpaceCreate" () :integer)
	;;  ( :integer :integer :integer :integer)
(defconstant dSAP_AXES_XYZ (logior 0 (ash 1 2) (ash 2 4)))
(defconstant dSAP_AXES_XZY (logior 0 (ash 2 2) (ash 1 4)))
(defconstant dSAP_AXES_YXZ (logior 1 (ash 0 2) (ash 2 4)))
(defconstant dSAP_AXES_YZX (logior 1 (ash 2 2) (ash 0 4)))
(defconstant dSAP_AXES_ZXY (logior 2 (ash 0 2) (ash 1 4)))
(defconstant dSAP_AXES_ZYX (logior 2 (ash 1 2) (ash 0 4)))

(defforeign dSweepAndPruneSpaceCreate odelib
	"dSweepAndPruneSpaceCreate" () :integer)
	;;  ( :integer :integer)

(defforeign dSpaceDestroy odelib
	"dSpaceDestroy" () :integer)
	;;  ( :integer)

(defforeign dHashSpaceSetLevels odelib
	"dHashSpaceSetLevels" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dHashSpaceGetLevels odelib
	"dHashSpaceGetLevels" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dSpaceSetCleanup odelib
	"dSpaceSetCleanup" () :integer)
	;;  ( :integer :integer)

(defforeign dSpaceGetCleanup odelib
	"dSpaceGetCleanup" () :integer)
	;;  ( :integer)

(defforeign dSpaceSetSublevel odelib
	"dSpaceSetSublevel" () :integer)
	;;  ( :integer :integer)

(defforeign dSpaceGetSublevel odelib
	"dSpaceGetSublevel" () :integer)
	;;  ( :integer)

(defforeign dSpaceSetManualCleanup odelib
	"dSpaceSetManualCleanup" () :integer)
	;;  ( :integer :integer)

(defforeign dSpaceGetManualCleanup odelib
	"dSpaceGetManualCleanup" () :integer)
	;;  ( :integer)

(defforeign dSpaceAdd odelib
	"dSpaceAdd" () :integer)
	;;  ( :integer :integer)

(defforeign dSpaceRemove odelib
	"dSpaceRemove" () :integer)
	;;  ( :integer :integer)

(defforeign dSpaceQuery odelib
	"dSpaceQuery" () :integer)
	;;  ( :integer :integer)

(defforeign dSpaceClean odelib
	"dSpaceClean" () :integer)
	;;  ( :integer)

(defforeign dSpaceGetNumGeoms odelib
	"dSpaceGetNumGeoms" () :integer)
	;;  ( :integer)

(defforeign dSpaceGetGeom odelib
	"dSpaceGetGeom" () :integer)
	;;  ( :integer :integer)

(defforeign dSpaceGetClass odelib
	"dSpaceGetClass" () :integer)
	;;  ( :integer)

(defforeign dGeomDestroy odelib
	"dGeomDestroy" () :integer)
	;;  ( :integer)

(defforeign dGeomSetData odelib
	"dGeomSetData" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomGetData odelib
	"dGeomGetData" () :integer)
	;;  ( :integer)

(defforeign dGeomSetBody odelib
	"dGeomSetBody" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomGetBody odelib
	"dGeomGetBody" () :integer)
	;;  ( :integer)

(defforeign dGeomSetPosition odelib
	"dGeomSetPosition" () :integer)
	;;  ( :integer :double :double :double)

(defforeign dGeomSetRotation odelib
	"dGeomSetRotation" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomSetQuaternion odelib
	"dGeomSetQuaternion" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomGetPosition odelib
	"dGeomGetPosition" () :integer)
	;;  ( :integer)

(defforeign dGeomCopyPosition odelib
	"dGeomCopyPosition" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomGetRotation odelib
	"dGeomGetRotation" () :integer)
	;;  ( :integer)

(defforeign dGeomCopyRotation odelib
	"dGeomCopyRotation" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomGetQuaternion odelib
	"dGeomGetQuaternion" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomGetAABB odelib
	"dGeomGetAABB" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomIsSpace odelib
	"dGeomIsSpace" () :integer)
	;;  ( :integer)

(defforeign dGeomGetSpace odelib
	"dGeomGetSpace" () :integer)
	;;  ( :integer)

(defforeign dGeomGetClass odelib
	"dGeomGetClass" () :integer)
	;;  ( :integer)

(defforeign dGeomSetCategoryBits odelib
	"dGeomSetCategoryBits" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomSetCollideBits odelib
	"dGeomSetCollideBits" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomGetCategoryBits odelib
	"dGeomGetCategoryBits" () :integer)
	;;  ( :integer)

(defforeign dGeomGetCollideBits odelib
	"dGeomGetCollideBits" () :integer)
	;;  ( :integer)

(defforeign dGeomEnable odelib
	"dGeomEnable" () :integer)
	;;  ( :integer)

(defforeign dGeomDisable odelib
	"dGeomDisable" () :integer)
	;;  ( :integer)

(defforeign dGeomIsEnabled odelib
	"dGeomIsEnabled" () :integer)
	;;  ( :integer)

(defanonenum 
	(dGeomCommonControlClass 0)
	(dGeomColliderControlClass 1))

(defanonenum 
	(dGeomCommonAnyControlCode 0)
	(dGeomColliderSetMergeSphereContactsControlCode 1)
	(dGeomColliderGetMergeSphereContactsControlCode 2))

(defanonenum 
	(dGeomColliderMergeContactsValue__Default 0)
	(dGeomColliderMergeContactsValue_None 1)
	(dGeomColliderMergeContactsValue_Normals 2)
	(dGeomColliderMergeContactsValue_Full 3))

(defforeign dGeomLowLevelControl odelib
	"dGeomLowLevelControl" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign dGeomGetRelPointPos odelib
	"dGeomGetRelPointPos" () :integer)
	;;  ( :integer :double :double :double :integer)

(defforeign dGeomGetPosRelPoint odelib
	"dGeomGetPosRelPoint" () :integer)
	;;  ( :integer :double :double :double :integer)

(defforeign dGeomVectorToWorld odelib
	"dGeomVectorToWorld" () :integer)
	;;  ( :integer :double :double :double :integer)

(defforeign dGeomVectorFromWorld odelib
	"dGeomVectorFromWorld" () :integer)
	;;  ( :integer :double :double :double :integer)

(defforeign dGeomSetOffsetPosition odelib
	"dGeomSetOffsetPosition" () :integer)
	;;  ( :integer :double :double :double)

(defforeign dGeomSetOffsetRotation odelib
	"dGeomSetOffsetRotation" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomSetOffsetQuaternion odelib
	"dGeomSetOffsetQuaternion" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomSetOffsetWorldPosition odelib
	"dGeomSetOffsetWorldPosition" () :integer)
	;;  ( :integer :double :double :double)

(defforeign dGeomSetOffsetWorldRotation odelib
	"dGeomSetOffsetWorldRotation" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomSetOffsetWorldQuaternion odelib
	"dGeomSetOffsetWorldQuaternion" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomClearOffset odelib
	"dGeomClearOffset" () :integer)
	;;  ( :integer)

(defforeign dGeomIsOffset odelib
	"dGeomIsOffset" () :integer)
	;;  ( :integer)

(defforeign dGeomGetOffsetPosition odelib
	"dGeomGetOffsetPosition" () :integer)
	;;  ( :integer)

(defforeign dGeomCopyOffsetPosition odelib
	"dGeomCopyOffsetPosition" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomGetOffsetRotation odelib
	"dGeomGetOffsetRotation" () :integer)
	;;  ( :integer)

(defforeign dGeomCopyOffsetRotation odelib
	"dGeomCopyOffsetRotation" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomGetOffsetQuaternion odelib
	"dGeomGetOffsetQuaternion" () :integer)
	;;  ( :integer :integer)
(defconstant CONTACTS_UNIMPORTANT #x80000000)

(defforeign dCollide odelib
	"dCollide" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign dSpaceCollide odelib
	"dSpaceCollide" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dSpaceCollide2 odelib
	"dSpaceCollide2" () :integer)
	;;  ( :integer :integer :integer :integer)

(defanonenum 
	(dMaxUserClasses 4))

(defanonenum 
	(dSphereClass 0)
	dBoxClass
	dCapsuleClass
	dCylinderClass
	dPlaneClass
	dRayClass
	dConvexClass
	dGeomTransformClass
	dTriMeshClass
	dHeightfieldClass
	dFirstSpaceClass
	(dSimpleSpaceClass dFirstSpaceClass)
	dHashSpaceClass
	dSweepAndPruneSpaceClass
	dQuadTreeSpaceClass
	(dLastSpaceClass dQuadTreeSpaceClass)
	dFirstUserClass
	(dLastUserClass (+ dFirstUserClass (- dMaxUserClasses 1)))
	dGeomNumClasses)

(defforeign dCreateSphere odelib
	"dCreateSphere" () :integer)
	;;  ( :integer :double)

(defforeign dGeomSphereSetRadius odelib
	"dGeomSphereSetRadius" () :integer)
	;;  ( :integer :double)

(defforeign dGeomSphereGetRadius odelib
	"dGeomSphereGetRadius" () :float)
	;;  ( :integer)

(defforeign dGeomSpherePointDepth odelib
	"dGeomSpherePointDepth" () :float)
	;;  ( :integer :double :double :double)

(defforeign dCreateConvex odelib
	"dCreateConvex" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dGeomSetConvex odelib
	"dGeomSetConvex" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dCreateBox odelib
	"dCreateBox" () :integer)
	;;  ( :integer :double :double :double)

(defforeign dGeomBoxSetLengths odelib
	"dGeomBoxSetLengths" () :integer)
	;;  ( :integer :double :double :double)

(defforeign dGeomBoxGetLengths odelib
	"dGeomBoxGetLengths" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomBoxPointDepth odelib
	"dGeomBoxPointDepth" () :float)
	;;  ( :integer :double :double :double)

(defforeign dCreatePlane odelib
	"dCreatePlane" () :integer)
	;;  ( :integer :double :double :double :double)

(defforeign dGeomPlaneSetParams odelib
	"dGeomPlaneSetParams" () :integer)
	;;  ( :integer :double :double :double :double)

(defforeign dGeomPlaneGetParams odelib
	"dGeomPlaneGetParams" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomPlanePointDepth odelib
	"dGeomPlanePointDepth" () :float)
	;;  ( :integer :double :double :double)

(defforeign dCreateCapsule odelib
	"dCreateCapsule" () :integer)
	;;  ( :integer :double :double)

(defforeign dGeomCapsuleSetParams odelib
	"dGeomCapsuleSetParams" () :integer)
	;;  ( :integer :double :double)

(defforeign dGeomCapsuleGetParams odelib
	"dGeomCapsuleGetParams" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dGeomCapsulePointDepth odelib
	"dGeomCapsulePointDepth" () :float)
	;;  ( :integer :double :double :double)

(defforeign dCreateCylinder odelib
	"dCreateCylinder" () :integer)
	;;  ( :integer :double :double)

(defforeign dGeomCylinderSetParams odelib
	"dGeomCylinderSetParams" () :integer)
	;;  ( :integer :double :double)

(defforeign dGeomCylinderGetParams odelib
	"dGeomCylinderGetParams" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dCreateRay odelib
	"dCreateRay" () :integer)
	;;  ( :integer :double)

(defforeign dGeomRaySetLength odelib
	"dGeomRaySetLength" () :integer)
	;;  ( :integer :double)

(defforeign dGeomRayGetLength odelib
	"dGeomRayGetLength" () :float)
	;;  ( :integer)

(defforeign dGeomRaySet odelib
	"dGeomRaySet" () :integer)
	;;  ( :integer :double :double :double :double :double :double)

(defforeign dGeomRayGet odelib
	"dGeomRayGet" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dGeomRaySetParams odelib
	"dGeomRaySetParams" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dGeomRayGetParams odelib
	"dGeomRayGetParams" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dGeomRaySetFirstContact odelib
	"dGeomRaySetFirstContact" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomRayGetFirstContact odelib
	"dGeomRayGetFirstContact" () :integer)
	;;  ( :integer)

(defforeign dGeomRaySetBackfaceCull odelib
	"dGeomRaySetBackfaceCull" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomRayGetBackfaceCull odelib
	"dGeomRayGetBackfaceCull" () :integer)
	;;  ( :integer)

(defforeign dGeomRaySetClosestHit odelib
	"dGeomRaySetClosestHit" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomRayGetClosestHit odelib
	"dGeomRayGetClosestHit" () :integer)
	;;  ( :integer)

(defforeign dCreateGeomTransform odelib
	"dCreateGeomTransform" () :integer)
	;;  ( :integer)

(defforeign dGeomTransformSetGeom odelib
	"dGeomTransformSetGeom" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomTransformGetGeom odelib
	"dGeomTransformGetGeom" () :integer)
	;;  ( :integer)

(defforeign dGeomTransformSetCleanup odelib
	"dGeomTransformSetCleanup" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomTransformGetCleanup odelib
	"dGeomTransformGetCleanup" () :integer)
	;;  ( :integer)

(defforeign dGeomTransformSetInfo odelib
	"dGeomTransformSetInfo" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomTransformGetInfo odelib
	"dGeomTransformGetInfo" () :integer)
	;;  ( :integer)

(defforeign dCreateHeightfield odelib
	"dCreateHeightfield" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dGeomHeightfieldDataCreate odelib
	"dGeomHeightfieldDataCreate" () :integer)
	;;  ()

(defforeign dGeomHeightfieldDataDestroy odelib
	"dGeomHeightfieldDataDestroy" () :integer)
	;;  ( :integer)

(defforeign dGeomHeightfieldDataBuildCallback odelib
	"dGeomHeightfieldDataBuildCallback" () :integer)
	;;  ( :integer :integer :integer :double :double :integer :integer :double :double :double :integer)

(defforeign dGeomHeightfieldDataBuildByte odelib
	"dGeomHeightfieldDataBuildByte" () :integer)
	;;  ( :integer :integer :integer :double :double :integer :integer :double :double :double :integer)

(defforeign dGeomHeightfieldDataBuildShort odelib
	"dGeomHeightfieldDataBuildShort" () :integer)
	;;  ( :integer :integer :integer :double :double :integer :integer :double :double :double :integer)

(defforeign dGeomHeightfieldDataBuildSingle odelib
	"dGeomHeightfieldDataBuildSingle" () :integer)
	;;  ( :integer :integer :integer :double :double :integer :integer :double :double :double :integer)

(defforeign dGeomHeightfieldDataBuildDouble odelib
	"dGeomHeightfieldDataBuildDouble" () :integer)
	;;  ( :integer :integer :integer :double :double :integer :integer :double :double :double :integer)

(defforeign dGeomHeightfieldDataSetBounds odelib
	"dGeomHeightfieldDataSetBounds" () :integer)
	;;  ( :integer :double :double)

(defforeign dGeomHeightfieldSetHeightfieldData odelib
	"dGeomHeightfieldSetHeightfieldData" () :integer)
	;;  ( :integer :integer)

(defforeign dGeomHeightfieldGetHeightfieldData odelib
	"dGeomHeightfieldGetHeightfieldData" () :integer)
	;;  ( :integer)

(defforeign dClosestLineSegmentPoints odelib
	"dClosestLineSegmentPoints" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dBoxTouchesBox odelib
	"dBoxTouchesBox" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer)

(defforeign dBoxBox odelib
	"dBoxBox" () :integer)
	;;  ( :integer :integer :integer :integer :integer :integer :integer :integer :integer :integer :integer :integer)

(defforeign dInfiniteAABB odelib
	"dInfiniteAABB" () :integer)
	;;  ( :integer :integer)

(defcstruct dGeomClass
	(bytes :integer)
	(collider :integer)
	(aabb :integer)
	(aabb_test :integer)
	(dtor :integer))

(defforeign dCreateGeomClass odelib
	"dCreateGeomClass" () :integer)
	;;  ( :integer)

(defforeign dGeomGetClassData odelib
	"dGeomGetClassData" () :integer)
	;;  ( :integer)

(defforeign dCreateGeom odelib
	"dCreateGeom" () :integer)
	;;  ( :integer)

(defforeign dSetColliderOverride odelib
	"dSetColliderOverride" () :integer)
	;;  ( :integer :integer :integer)
(defconstant dTHREADING_THREAD_COUNT_UNLIMITED 0)

(defcstruct dThreadedWaitTime
	(wait_sec :integer)
	(wait_nsec :integer))

(defcstruct dThreadingFunctionsInfo
	(struct_size :integer)
	(alloc_mutex_group :integer)
	(free_mutex_group :integer)
	(lock_group_mutex :integer)
	(unlock_group_mutex :integer)
	(alloc_call_wait :integer)
	(reset_call_wait :integer)
	(free_call_wait :integer)
	(post_call :integer)
	(alter_call_dependencies_count :integer)
	(wait_call :integer)
	(retrieve_thread_count :integer)
	(preallocate_resources_for_calls :integer))

(defforeign dThreadingAllocateSelfThreadedImplementation odelib
	"dThreadingAllocateSelfThreadedImplementation" () :integer)
	;;  ()

(defforeign dThreadingAllocateMultiThreadedImplementation odelib
	"dThreadingAllocateMultiThreadedImplementation" () :integer)
	;;  ()

(defforeign dThreadingImplementationGetFunctions odelib
	"dThreadingImplementationGetFunctions" () :integer)
	;;  ( :integer)

(defforeign dThreadingImplementationShutdownProcessing odelib
	"dThreadingImplementationShutdownProcessing" () :integer)
	;;  ( :integer)

(defforeign dThreadingImplementationCleanupForRestart odelib
	"dThreadingImplementationCleanupForRestart" () :integer)
	;;  ( :integer)

(defforeign dThreadingFreeImplementation odelib
	"dThreadingFreeImplementation" () :integer)
	;;  ( :integer)

(defforeign dExternalThreadingServeMultiThreadedImplementation odelib
	"dExternalThreadingServeMultiThreadedImplementation" () :integer)
	;;  ( :integer :integer :integer)

(defforeign dThreadingAllocateThreadPool odelib
	"dThreadingAllocateThreadPool" () :integer)
	;;  ( :integer :integer :integer :integer)

(defforeign dThreadingThreadPoolServeMultiThreadedImplementation odelib
	"dThreadingThreadPoolServeMultiThreadedImplementation" () :integer)
	;;  ( :integer :integer)

(defforeign dThreadingThreadPoolWaitIdleState odelib
	"dThreadingThreadPoolWaitIdleState" () :integer)
	;;  ( :integer)

(defforeign dThreadingFreeThreadPool odelib
	"dThreadingFreeThreadPool" () :integer)
	;;  ( :integer)

(defforeign dCooperativeCreate odelib
	"dCooperativeCreate" () :integer)
	;;  ( :integer :integer)

(defforeign dCooperativeDestroy odelib
	"dCooperativeDestroy" () :integer)
	;;  ( :integer)

(defforeign dResourceRequirementsCreate odelib
	"dResourceRequirementsCreate" () :integer)
	;;  ( :integer)

(defforeign dResourceRequirementsDestroy odelib
	"dResourceRequirementsDestroy" () :integer)
	;;  ( :integer)

(defforeign dResourceRequirementsClone odelib
	"dResourceRequirementsClone" () :integer)
	;;  ( :integer)

(defforeign dResourceRequirementsMergeIn odelib
	"dResourceRequirementsMergeIn" () :integer)
	;;  ( :integer :integer)

(defforeign dResourceContainerAcquire odelib
	"dResourceContainerAcquire" () :integer)
	;;  ( :integer)

(defforeign dResourceContainerDestroy odelib
	"dResourceContainerDestroy" () :integer)
	;;  ( :integer)

(defforeign dWorldExportDIF odelib
	"dWorldExportDIF" () :integer)
	;;  ( :integer :integer :char *)


(defun cout-float-vector (adr len &optional (r (instantiate float-vector len)))
  (dotimes (i len) (setf (elt r i)
                         #+:x86_64
                         (sys:peek (+ adr (* 8 i)) :double)
                         #-:x86_64
                         (sys:peek (+ adr (* 4 i)) :double)
                         ))
  r)
;;
;;(defun nao-gyro nil (cout-float-vector (wb_gyro_get_values gyro) 2))
(defun fstring-to-string (fstr)
  (let* ((len (length fstr)) (str (make-string len)))
    (dotimes (i len) (setf (elt str i) (elt fstr i)))
    str))
;;;
(defun cout-fstring (fstr size)
  (sys:poke
   (+ 2 (* 4 size)) ;; length + 2;; bgra8
   (+ (sys::address fstr) 8) ;; address
   :long)
  fstr)
;;;
(defmethod cstruct
  (:get-alist
   ()
   ;; slotlst = (slot-info-0 ... slot-info-n)
   ;; slot-info-i= (id type count element-size index total-byte-count)
   ;; total-byte-count = count * element-size
   ;; index(i) = index(i-1) + total-byte-count(i-1)
   (mapcar
    #'(lambda (s) (cons (car s) (send self :get+ (car s))))
    (send (class self) :slotlist)))
  (:get+
   (slot-id &aux (cnt (elt (send (class self) :slot slot-id) 2))
	    lst)
   (cond
    ((= cnt 1) (send self :get slot-id))
    (t (dotimes (i cnt) (push (send self :get slot-id i) lst))
       (reverse lst))))
  (:set+
   (val slot-id)
   (let* ((slt (send (class self) :slot slot-id))
	  (typ (elt slt 1)) (cnt (elt slt 2))
	  (esize (elt slt 3)) (offset (elt slt 4))
	  (tsize (elt slt 5))
	  )
     (if (> cnt 1)
	 (dotimes (i cnt)
	   (sys:poke (elt val i) self (+ offset (* i esize)) typ))
       (if (numberp val) 
	   (sys:poke val self offset typ)
	 (sys:poke (elt val 0) self offset typ)))
     val))
  )

(defun cout-value (adr offset typ &optional (len 1) (r (instantiate vector len)))
  (cond
   ((= len 1)
    #+:x86_64
    (sys:peek (+ adr offset) typ)
    #-:x86_64
    (sys:peek (+ adr offset) typ))
   (t (dotimes (i len) (setf (elt r i)
			     #+:x86_64
			     (sys:peek (+ adr offset (* (byte-size typ) i)) typ)
			     #-:x86_64
			     (sys:peek (+ adr offset (* (byte-size typ) i)) typ)
			     ))
      r)))
(defun cout-cstruct (addr cls)
  (let* ((str (instantiate cls))
	 (slt (send cls :slotlist)))
    (dolist (s slt)
      (send str :set+ (cout-value addr (elt s 4) (elt s 1) (elt s 2)) (elt s 0)))
    str))
(defun cout-string (addr)
  (let (ret c (i 0))
    (while (not (= 0 (setq c (sys:peek (+ addr i) :byte))))
      (incf i) (push c ret))
    (coerce (reverse ret) string)))
;;;
#|
typedef struct {
  int id;
  double position[3];
  double orientation[4];
  double size[2];
  int position_on_image[2];
  int size_on_image[2];
  int number_of_colors;
  double *colors;
  char *model;
} WbCameraRecognitionObject;
|#
(defcstruct WbCameraRecognitionObject
  (id :integer)
  (position :double 3)
  (orientation :double 4)
  (size :double 2)
  (position_on_image :integer 2)
  (size_on_image :integer 2)
  (number_of_colors :integer)
  (colors :double *)
  (model :char *)
  )
;;;
(defun wb_camera_image_get_alfa (im camera_width m n)
 (elt im (+ 3 (* 4 (+ (* n camera_width) m)))))
(defun wb_camera_image_get_byte (im camera_width m n &optional (offset 0))
 (if (= offset 3)
   (wb_camera_image_get_grey im camera_width m n)
     (elt im (+ offset (* 4 (+ (* n camera_width) m))))))
(defun wb_camera_image_get_red (im camera_width m n)
 (wb_camera_image_get_byte im camera_width m n 2))
(defun wb_camera_image_get_green (im camera_width m n)
 (wb_camera_image_get_byte im camera_width m n 1))
(defun wb_camera_image_get_blue (im camera_width m n)
 (wb_camera_image_get_byte im camera_width m n 0))

(defun wb_camera_image_get_grey (im camera_width m n)
 (/ (+
     (wb_camera_image_get_red im camera_width m n)
     (wb_camera_image_get_green im camera_width m n)
     (wb_camera_image_get_blue im camera_width m n))
  3))

(defun wb_camera_image_get_yellow (im camera_width m n)
 (/ (+
     (wb_camera_image_get_red im camera_width m n)
     (wb_camera_image_get_green im camera_width m n))
  2))

(defun webots-camera-fstring (camera)
  (let* ((w (wb_camera_get_width camera))
         (h (wb_camera_get_height camera)))
    (cout-fstring (wb_camera_get_image camera) (* 4 w h))))

(defun webots-camera-image (camera
                            &optional str)
  (let* ((w (wb_camera_get_width camera))
         (h (wb_camera_get_height camera))
         (fs (cout-fstring (wb_camera_get_image camera) (* 4 w h))))
    (unless str (setq str (make-string (* 3 w h))))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
         ((>= y h))
         (do* ((x 0 (+ 1 x))
               (p3 (* 3 (+ x wy)) (* 3 (+ x wy)))
               (p4 (* 4 (+ x wy)) (* 4 (+ x wy))))
              ((>= x w))
              (setf (elt str p3) (elt fs (+ 2 p4))
                    (elt str (+ 1 p3)) (elt fs (+ 1 p4))
                    (elt str (+ 2 p3)) (elt fs p4))))
    #|
    (do ((i 0 (+ 1 i)) (p3 0 (+ 3 p3)) (p4 0 (+ 4 p4)))
    ((>= i wh))
    (setf (elt str p3) (elt fs (+ 2 p4))
    (elt str (+ 1 p3)) (elt fs (+ 1 p4))
    (elt str (+ 2 p3)) (elt fs p4)))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
	 ((>= y h))
	 (do* ((x 0 (+ 1 x))
	       (p3 (* 3 (+ x wy)) (* 3 (+ x wy)))
	       (p4 (* 4 (+ x wy)) (* 4 (+ x wy))))
	      ((>= x w))
	      (setf (elt fs p3) (elt fs (+ 2 p4))
		    (elt fs (+ 1 p3)) (elt fs (+ 1 p4))
		    (elt fs (+ 2 p3)) (elt fs p4))))
    (do ((i 0 (+ 1 i)) (p3 0 (+ 3 p3)) (p4 0 (+ 4 p4)))
	((>= i wh))
	(setf (elt str p3) (elt fs (+ 2 p4))
	      (elt str (+ 1 p3)) (elt fs (+ 1 p4))
	      (elt str (+ 2 p3)) (elt fs p4)))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
	 ((>= y h))
	 (do* ((x 0 (+ 1 x))
	       (p3 (* 3 (+ x wy)) (* 3 (+ x wy)))
	       (p4 (* 4 (+ x wy)) (* 4 (+ x wy))))
	      ((>= x w))
	      (setf (elt str p3) (elt fs (+ 2 p4))
		    (elt str (+ 1 p3)) (elt fs (+ 1 p4))
		    (elt str (+ 2 p3)) (elt fs p4))))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
	 ((>= y h))
	 (do* ((x 0 (+ 1 x))
	       (p3 (* 3 (+ x wy)) (* 3 (+ x wy)))
	       (p4 (* 4 (+ x wy)) (* 4 (+ x wy))))
	      ((>= x w))
	      (setf (elt str p3) (elt fs (+ 2 p4)))
	      (setf (elt str (+ 1 p3)) (elt fs (+ 1 p4)))
	      (setf (elt str (+ 2 p3)) (elt fs p4))))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
	 ((>= y h))
	 (do* ((x 0 (+ 1 x)) (wxy (+ x wy) (+ x wy)))
	      ((>= x w))
	      (setf (elt str (* 3 wxy))
		    (elt fs (+ 2 (* 4 wxy))))
	      (setf (elt str (+ 1 (* 3 wxy)))
		    (elt fs (+ 1 (* 4 wxy))))
	      (setf (elt str (+ 2 (* 3 wxy)))
		    (elt fs (+ 0 (* 4 wxy))))))
    (dotimes (i wh)
      (setf (elt str ptr30) (elt fs ptr42)
    (elt str ptr31) (elt fs ptr41)
    (elt str ptr32) (elt fs ptr40))
      (incf ptr30 3) (incf ptr31 3) (incf ptr32 3)
      (incf ptr40 4) (incf ptr41 4) (incf ptr42 4))
    |#
    str)
  )

(defun print_camera_image (camera &optional (offset 0) (SCALED 4)
                                  &aux width height image grey)
  (setq width (wb_camera_get_width camera))
  (setq height (wb_camera_get_height camera))
  (setq image (webots-camera-fstring camera))
  (format t "image length=~s~%" (length image))
  (format t "image length=~d~%" (length image))
  (format t "original resolution: ~d x ~d, scaled to ~d x ~d~%"
          width height (/ width SCALED) (/ height SCALED))

  (setq line (make-array (/ width SCALED)))
  (do ((y 0 (+ y SCALED)))
      ((>= y height))
      (format t "~d line:" y)
      (do ((x 0 (+ x SCALED)) (count 0 (1+ count)))
          ((>= x width) )
          (setq grey (wb_camera_image_get_byte image width x y offset))
          (format t " ~x" grey)
          (setf (elt line count) grey))
      (format t "~%")
      )
  (format t "end of y-do ~%")
  )
;;;
;;;
(defvar
  *node-type-symbol-list*
  (mapcan
   #'(lambda (n)
      (if (boundp n)
	(list (cons (symbol-value n) n))
	  nil))
	      '(
     WB_NODE_NO_NODE
     WB_NODE_APPEARANCE
     WB_NODE_BACKGROUND
     WB_NODE_BOX
     WB_NODE_COLOR
     WB_NODE_CONE
     WB_NODE_COORDINATE
     WB_NODE_CYLINDER
     WB_NODE_DIRECTIONAL_LIGHT
     WB_NODE_ELEVATION_GRID
     WB_NODE_EXTRUSION
     WB_NODE_FOG
     WB_NODE_GROUP
     WB_NODE_IMAGE_TEXTURE
     WB_NODE_INDEXED_FACE_SET
     WB_NODE_INDEXED_LINE_SET
     WB_NODE_MATERIAL
     WB_NODE_POINT_LIGHT
     WB_NODE_SHAPE
     WB_NODE_SPHERE
     WB_NODE_SPOT_LIGHT
     WB_NODE_SWITCH
     WB_NODE_TEXTURE_COORDINATE
     WB_NODE_TEXTURE_TRANSFORM
     WB_NODE_TRANSFORM
     WB_NODE_VIEWPOINT
     WB_NODE_WORLD_INFO
     WB_NODE_CAPSULE
     WB_NODE_PLANE
     WB_NODE_ROBOT
     WB_NODE_SUPERVISOR
     WB_NODE_DIFFERENTIAL_WHEELS
     WB_NODE_BALL_JOINT
     WB_NODE_BALL_JOINT_PARAMETERS
     WB_NODE_CAMERA_ZOOM
     WB_NODE_CHARGER
     WB_NODE_CONTACT_PROPERTIES
     WB_NODE_DAMPING
     WB_NODE_HINGE_JOINT
     WB_NODE_HINGE_JOINT_PARAMETERS
     WB_NODE_HINGE_2_JOINT_PARAMETERS
     WB_NODE_HINGE_2_JOINT
     WB_NODE_JOINT_PARAMETERS
     WB_NODE_PHYSICS
     WB_NODE_SLIDER_JOINT
     WB_NODE_SOLID
     WB_NODE_SOLID_REFERENCE
     WB_NODE_ACCELEROMETER
     WB_NODE_CAMERA
     WB_NODE_COMPASS
     WB_NODE_CONNECTOR
     WB_NODE_DISPLAY
     WB_NODE_DISTANCE_SENSOR
     WB_NODE_EMITTER
     WB_NODE_GPS
     WB_NODE_GYRO
     WB_NODE_INERTIAL_UNIT
     WB_NODE_LED
     WB_NODE_LIGHT_SENSOR
     WB_NODE_LINEAR_MOTOR
     WB_NODE_MICROPHONE
     WB_NODE_PEN
     WB_NODE_POSITION_SENSOR
     WB_NODE_PROPELLER
     WB_NODE_RADIO
     WB_NODE_ROTATIONAL_MOTOR
     WB_NODE_RECEIVER
     WB_NODE_SERVO
     WB_NODE_SPEAKER
     WB_NODE_TOUCH_SENSOR
     ))
  )

(defun webots-node-type-symbol (num)
  (cdr (assoc num *node-type-symbol-list*)))

(defun webots-device-names nil
  (mapcar #'(lambda (s) (get s :device-name)) (webots-device-symbols)))

(defun init-webots-device-symbols nil
  (let* ((n_devices (wb_robot_get_number_of_devices))
         (robot-type (wb_robot_get_type))
         dev2 name dev-sym
         (dev 0) type-sym type dev-symbols type-symbols
         (robot-name (string-upcase (wb_robot_get_name)))
         (robot (intern robot-name)))
    (when (= WB_NODE_DIFFERENTIAL_WHEELS robot-type)
      (setq type-sym (webots-node-type-symbol robot-type))
      (setf (get type-sym :value) (symbol-value type-sym))
      (format t "--- Differetial wheels name=~A, type-sym=~A~%" robot type-sym)
      (dolist (n '("-BOTH" "-LEFT" "-RIGHT"))
        (setq name (concatenate string robot-name n))
        (setq dev-sym (intern name))
        (setf (get dev-sym :device) dev)
        (setf (get type-sym :device-names)
              (push name (get type-sym :device-names)))
        (setf (get type-sym :device-symbols)
              (push dev-sym
                    (get type-sym :device-symbols)))
        (incf dev)
        )
      (setf (get type-sym :device-names)
            (reverse (get type-sym :device-names)))
      (setf (get type-sym :device-symbols) 
            (reverse (get type-sym :device-symbols)))
      )
    (dotimes (i n_devices)
      (setq dev (wb_robot_get_device_by_index i))
      ;;(setq name (format nil "~A" (wb_device_get_name dev)))
      (setq name (fstring-to-string (wb_device_get_name dev)))
      (setq dev2 (wb_robot_get_device name))
      (setq type (wb_device_get_type dev))
      (setq type-sym (webots-node-type-symbol type))
      (setq dev-sym (intern (string-upcase name)))
      (setf (get dev-sym :device-name) name)
      (setf (get dev-sym :device) dev)
      (setf (get dev-sym :device-type) type)
      (setf (get dev-sym :device-type-symbol) type-sym)
      (format t "dev-sym=~A(~A) type=~A(~A) dev=~A(~A in ~A)~%"
              dev-sym name type type-sym dev i n_devices)
      (setf (get type-sym :device-names)
            (cons name (get type-sym :device-names)))
      (setf (get type-sym :device-symbols)
            (cons dev-sym (get type-sym :device-symbols)))
      (setf (get type-sym :value) (symbol-value type-sym))
      (push dev-sym dev-symbols)
      (pushnew type-sym type-symbols)
      )
    (dolist (typ type-symbols)
      (setf (get typ :device-names) (reverse (get typ :device-names)))
      (setf (get typ :device-symbols) (reverse (get typ :device-symbols)))
      (setf (get robot typ) (get typ :device-symbols)))
    (setf (get robot :device-types) type-symbols)
    (setf (get robot :device-symbols) (reverse dev-symbols))
    
    (setq *webots-camera-symbols*
          (get 'wb_node_camera :device-symbols))
    (setq *webots-all-motor-symbols*
          (append
           (get 'WB_NODE_DIFFERENTIAL_WHEELS :device-symbols)
           (get 'WB_NODE_ROTATIONAL_MOTOR :device-symbols)
           (get 'WB_NODE_LINEAR_MOTOR :device-symbols)
           (get 'WB_NODE_SERVO :device-symbols)))
    ))

(defun webots-camera-symbols nil *webots-camera-symbols*)
(defun webots-all-motor-symbols nil *webots-all-motor-symbols*)

(defun webots-device-enables (time_step)
  (when (get 'WB_NODE_DIFFERENTIAL_WHEELS :device-symbols)
    (wb_differential_wheels_enable_encoders)
    )
  (dolist (s (get 'WB_NODE_ROTATIONAL_MOTOR :device-symbols))
    (wb_motor_enable_position (get s :device) time_step)
    (wb_motor_set_position (get s :device) 0.0)
    )
  (dolist (s (get 'WB_NODE_LINEAR_MOTOR :device-symbols))
    (wb_motor_enable_position (get s :device) time_step)
    ;;(wb_motor_set_position (get s :device) 0.0))
    )
  (dolist (s (get 'WB_NODE_SERVO :device-symbols))
    (wb_servo_enable_position (get s :device) time_step))
  ;;
  (dolist (s (get 'WB_NODE_CAMERA :device-symbols))
    (wb_camera_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_ACCELEROMETER :device-symbols))
    (wb_accelerometer_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_GYRO :device-symbols))
    (wb_gyro_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_GPS :device-symbols))
    (wb_gps_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_TOUCH_SENSOR :device-symbols))
    (wb_touch_sensor_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_DISTANCE_SENSOR :device-symbols))
    (wb_distance_sensor_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_COMPASS :device-symbols))
    (wb_compass_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_INERTIAL_UNIT :device-symbols))
    (wb_inertial_unit_enable (get s :device) time_step))
  )
;;;
(defun wb_differential_wheels_set_wheel_speed (d v)
  (cond
   ((= d 0)
    (wb_differential_wheels_set_speed  v v))
   ((= d 1)
    (wb_differential_wheels_set_speed
     v (wb_differential_wheels_get_right_speed)))
   ((= d 2)
    (wb_differential_wheels_set_speed
     (wb_differential_wheels_get_left_speed) v))))

(defun wb_differential_wheels_get_wheel_speed (d)
  (cond
   ((= d 0)
    (/ (+ (wb_differential_wheels_get_left_speed)
          (wb_differential_wheels_get_right_speed)) 2.0)
    )
   ((= d 1) (wb_differential_wheels_get_left_speed))
   ((= d 2) (wb_differential_wheels_get_right_speed))))

(defun init-webots-define-motor-functions nil
  (mapcar
   #'(lambda (s)
       (let* ((d (get s :device))
              (max (wb_differential_wheels_get_max_speed))
              (min (- max))
              form)
         (setf (get s :min) min)
         (setf (get s :max) max)
         (setf (get s :dtheta) (wb_differential_wheels_get_speed_unit))
         (setq form
               `(defun ,s (&optional v)
                  (if v (wb_differential_wheels_set_wheel_speed ,d v)
                    (wb_differential_wheels_get_wheel_speed ,d))
                  ))
         (eval form)
         (setf (get s :def) form)
         s))
   (get 'wb_node_differential_wheels :device-symbols))
  (mapcar
   #'(lambda (s)
       (let* ((d (get s :device))
              (min (wb_motor_get_min_position d))
              (max (wb_motor_get_max_position d))
              (zero-range (zerop (- max min)))
              form)
         (setf (get s :min) (if zero-range -135.0 (rad2deg min)))
         (setf (get s :max) (if zero-range 135.0 (rad2deg max) ))
         (setf (get s :dtheta) (* (- (get s :max) (get s :min)) 0.1))
         (setq form
               `(defun ,s (&optional v)
                  (if v (wb_motor_set_position ,d (deg2rad v)))
                  (rad2deg (wb_motor_get_position ,d))
                  ))
         (setf (get s :def) form)
         (eval form)
         s))
   (get 'wb_node_rotational_motor :device-symbols))
  (mapcar
   #'(lambda (s)
       (let* ((d (get s :device))
              (min (wb_motor_get_min_position d))
              (max (wb_motor_get_max_position d))
              (zero-range (zerop (- max min)))
              form)
         (setf (get s :min) (if zero-range 0.0 min))
         (setf (get s :max) (if zero-range 1.0 max) )
         (setf (get s :dtheta) (* (- (get s :max) (get s :min)) 0.1))
         (setq form
               `(defun ,s (&optional v)
                  (if v (wb_motor_set_position ,d v))
                  (wb_motor_get_position ,d)
                  ))
         (setf (get s :def) form)
         (eval form)
         s))
   (get 'wb_node_linear_motor :device-symbols))
  (mapcar
   #'(lambda (s)
       (let* ((d (get s :device))
              (min (wb_servo_get_min_position d))
              (max (wb_servo_get_max_position d))
              (zero-range (zerop (- max min)))
              form)
         (setf (get s :min) (if zero-range -135.0 (rad2deg min)))
         (setf (get s :max) (if zero-range 135.0 (rad2deg max) ))
         (setf (get s :dtheta) (* (- (get s :max) (get s :min)) 0.1))
         (setq form
               `(defun ,s (&optional v)
                  (if v (wb_servo_set_position ,d (deg2rad v)))
                  (rad2deg (wb_servo_get_position ,d))
                  ))
         (setf (get s :def) form)
         (eval form)
         s))
   (get 'wb_node_servo :device-symbols))
  )

(defun update-to-webots (&optional (av (send *robot* :angle-vector)))
  (let ((servo-names
         (append (get 'wb_node_servo :device-symbols)
                 (get 'wb_node_rotational_motor :device-symbols))))
    (dotimes (i (length servo-names))
      (funcall (elt servo-names i) (elt av i))))
  )
(defun update-to-eus-robot (&optional (av (send *robot* :angle-vector)))
  (let ((servo-names
         (append (get 'wb_node_servo :device-symbols)
                 (get 'wb_node_rotational_motor :device-symbols))))
    (send *robot* :angle-vector
          (coerce servo-names float-vector)))
  )

;;;
(defun robot-accelerometer (&optional (cnt 1)
                                      (acc (instantiate float-vector 3)))
  (dotimes (i cnt)
    (v+ acc
        (cout-float-vector
         (wb_accelerometer_get_values (get 'accelerometer :device)) 3)
        acc)
    )
  (scale (/ 1.0 cnt) acc))
(defun robot-gyro nil (cout-float-vector (wb_gyro_get_values (get 'gyro :device)) 2))

(defun terminate nil
  (wb_robot_cleanup))

(defun simulation_step nil
  (if (= (wb_robot_step time_step) -1)
      (terminate)))

;;;

(defun webot-jvl-images (&optional (x 0) (y 30) 
                                   &aux (width 160) (height 120)
                                   remove-list)
  (when
      (get 'wb_node_camera :device-symbols)
    (dolist (s (get 'wb_node_camera :device-symbols))
      (setq width (wb_camera_get_width (get s :device)))
      (setq height (wb_camera_get_height (get s :device)))
      (format t "jvl-images s=~S w=~A,h=~A~%" s width height)
      (cond
       ((= height 1) ;; remove sick lms, it should not be camera!>cyberbotics
        (push s remove-list))
       (t (setf (get s :jvl-image)
                (instance jvl-image :init :width width :height height))
          (send (get s :jvl-image) :color-image24)
          (setf (get s :image-canvas)
                (create-image-canvas (get s :jvl-image) :title (get s :device-name)))
          (send (get s :image-canvas) :move x y)
          (setf (get s :image-width) width)
          (setf (get s :image-height) height)
          (setf (get s :x) x (get s :y) y)
          (setq y (+ y height 30)))))
    (setf (get 'wb_node_camera :device-symbols)
          (set-difference (get 'wb_node_camera :device-symbols)
                          remove-list)))
  (format t "jvl-images =~A~%" (get 'wb_node_camera :device-symbols))
  )

(defun webot-edge-images ()
  (dolist (s (get 'wb_node_camera :device-symbols))
    (setf (get s :edge-converter)
          (instance edge-converter :init :image (get s :jvl-image)))
    ;;(send *edge* :set-param ":function convSobel")
    ;;(send *edge* :set-param ":function convSmooth")
    ;;(send *edge* :set-param ":function convXY")
    ;;(send *edge* :set-param ":function convMagXY")
    (send (get s :edge-converter) :set-param ":function convCanny")
    (send (get s :edge-converter) :set-param ":gauss-kernel-sigma 1.0")
    (send (get s :edge-converter) :set-param ":gaussderiv-kernel-sigma 1.0")
    (setf (get s :edge-canvas)
          (create-image-canvas (send (get s :edge-converter) :get-outimage)
                               :title (format nil "~A Edge" (get s :device-name))))

    (send (get s :edge-canvas) :move
          (+ (get s :x) (get s :image-width) 5)
          (get s :y))
    )
  )

(defun webot-hsicolor-images (&optional (x 0) (y 330))
  (dolist (s (get 'wb_node_camera :device-symbols))
    (setf (get s :hsicolor-converter)
          (instance hsicolor-converter :init :image (get s :jvl-image)))
    (setf (get s :hsicolor-canvas)
          (create-image-canvas (send (get s :hsicolor-converter) :get-outimage)
                               :title (format nil "~A Color" (get s :device-name))))
    (send (get s :hsicolor-canvas) :move
          (+ (get s :x) (get s :image-width) (get s :image-width) 10)
          (get s :y))

    (setf (get s :hsicolor-panel)
          (instance X::color-converter-panel :create
                    (get s :hsicolor-converter)
                    :filename "ball-color-params.l"
                    :title (format nil "~A Color Panel" (get s :device-name))))
    (send (get s :hsicolor-panel) :move x y)
    (send (get s :hsicolor-panel) :refresh)
    (setq y (+ y 200))
    )
  )

(defun webot-mepzoom-images (&optional (x 420) (y 330))
  (dolist (s (get 'wb_node_camera :device-symbols))
    (setf (get s :mepzoom-converter)
          (instance mepzoom-converter :init :image (get s :jvl-image)
                    :image-type IMAGE_RGB
                    :ref-width 32 :ref-height 32
                    :ser-width 120 :ser-height 100 :step 1))
    (send (get s :mepzoom-converter) :ser-x 80)
    (send (get s :mepzoom-converter) :ser-y 60)
    (setf (get s :mepzoom-refview)
               (create-image-canvas (send (get s :mepzoom-converter) :get-refimage)
                                    :title (format nil "~A Mep" (get s :device-name))))
    (send (get s :mepzoom-refview) :move x y)
    (setq y (+ y 200))
    )
  )

(defun webot-init-images nil
  (webot-jvl-images 0 30)
  (webot-edge-images)
  (webot-hsicolor-images)
  (webot-mepzoom-images)
  )

(defun webot-image-capture nil
  (dolist (s (get 'wb_node_camera :device-symbols))
    (unless (get s :capture-off)
      (send (get s :jvl-image) :set-buffer
            (webots-camera-image
             (get s :device)
             (make-foreign-string (send (get s :jvl-image) :get-buffer)
                                  (* 3 (get s :image-width) (get s :image-height)))))
      (send (get s :image-canvas) :putimage (get s :jvl-image) :flush t)))
  )
;;;
;;;
;;;
(defun webot-proc-edge nil
  (dolist (s (get 'wb_node_camera :device-symbols))
    (unless (get s :edge-off)
      (send (get s :edge-converter) :convert)
      (send (get s :edge-canvas) :putimage 
            (send (get s :edge-converter) :get-outimage) :flush t)
      )
    ))

(defun webot-proc-color nil
  (dolist (s (get 'wb_node_camera :device-symbols))
    (unless (get s :hsicolor-off)
      (send (get s :hsicolor-converter) :convert)
      (send (get s :hsicolor-converter) :get-result 0)
      (send (get s :hsicolor-canvas)
            :putimage (send (get s :hsicolor-converter) :get-outimage) :flush t)
      (when (> (send (get s :hsicolor-converter) :area) 0)
        (send (get s :hsicolor-canvas)
              :draw-cross (send (get s :hsicolor-converter) :center-xy) 5 x::*red*)
        (send (get s :hsicolor-canvas)
              :draw-cross (send (get s :hsicolor-converter) :xy1) 5 x::*yellow*)
        (send (get s :hsicolor-canvas)
              :draw-cross (send (get s :hsicolor-converter) :xy2) 5 x::*white*)
        (send (get s :hsicolor-canvas) :flush))
      )
    )
  )
(defun webot-proc-mepzoom nil
  (dolist (s (get 'wb_node_camera :device-symbols))
    (unless (get s :mepzoom-off)
      (proc-mepzoom-one
       (get s :mepzoom-converter)
       (get s :image-canvas)
       (get s :mepzoom-refview)
       'track))
    )
  )

(defun proc-mepzoom-one (mep view refview mep-state)
  (send mep :convert)
  (send view :putimage (send mep :get-inimage) :flush t)
  (send refview :putimage (send mep :get-refimage) :flush t)
  ;;
  (send mep :draw-ser-rectangle view)
  (send mep :draw-mv-rectangle view)
  (send mep :draw-ref-rectangle refview) 

  (send view :string 0 50 (format nil "~5,3f" (send mep :distmin)))
  (send view :string 0 75 (format nil "~5,3f [sec]" (send mep :conv-time)))
  (send view :draw-cross (send mep :mv))

  (send view :flush)
  (send refview :flush)
  ;;
  (when (eq mep-state 'track)
    (send mep :ser-x (send mep :mv-x))
    (send mep :ser-y (send mep :mv-y)))
  
  (when (and (eq mep-state 'track) (> (send mep :distmin) 0.15))
    (send mep :ser-x 80)
    (send mep :ser-y 60)
    (send mep :ser-width 100)
    (send mep :ser-height 70)
    (setq mep-state 'search)
    )
  (when (and (eq mep-state 'search) (< (send mep :distmin) 0.15))
    (format t "mep-state=search pos=(~s ~s)~%"
            (send mep :mv-x) (send mep :mv-y))
    (send mep :ser-x (send mep :mv-x))
    (send mep :ser-y (send mep :mv-y))
    (send mep :ser-width 80)
    (send mep :ser-height 70)
    (setq mep-state 'track)
    )
  )

(defun webot-proc-mouse
  (&aux ev et)
  (while (setq ev (x::next-event))
    (dolist (s (get 'wb_node_camera :device-symbols))
      (cond
       ((eq (x::event-window ev) (get s :image-canvas))
        (when (eq (x::event-type ev) :buttonrelease)
          (format t "mouse button=~s in ~A pos=~s~%"
                  (x::event-button ev) s (x::event-pos ev))
          (let* ((mp (x::event-pos ev))
                 (x (elt mp 0)) (y (elt mp 1)))
            (cond
             ((= 3 (x::event-button ev))
              (setq *attention-camera* s)
              (setq *lookat-run* :mep)
              )
             ((>= 2 (x::event-button ev))
              (send (get s :image-canvas) :buttonpress ev)
              (send (get s :mepzoom-converter) :update-zoom-ref x y)
              (send (get s :mepzoom-converter)  :ser-x x)
              (send (get s :mepzoom-converter)  :ser-y y)
              )))))
       ((eq (x::event-window ev) (get s :hsicolor-canvas))
        (when (eq (x::event-type ev) :buttonrelease)
          (format t " mouse button=~s in ~A pos=~s~%"
                  (x::event-button ev) s (x::event-pos ev))
          (setq *attention-camera* s)
          (setq *lookat-run* :color))
        )))
    (setq et (x::event-type ev))
    (if (not (eq et :noexpose))
        (send (x::event-window ev) et ev)))
  )

(defun webot-image-proc-one nil
  (webot-image-capture)
  (webot-proc-mouse)
  (webot-proc-edge)
  (webot-proc-color)
  (webot-proc-mepzoom)
  )



